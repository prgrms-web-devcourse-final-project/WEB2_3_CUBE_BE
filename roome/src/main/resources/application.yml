spring:
  profiles:
    active: local
  config:
    import: optional:file:.env[.properties]
  autoconfigure:
    exclude:
      - io.awspring.cloud.autoconfigure.s3.S3AutoConfiguration
  servlet:
    multipart:
      max-file-size: 6MB
      max-request-size: 6MB
  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/oauth/callback/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - email
              - profile
          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/oauth/callback/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
          kakao:
            client-name: Kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/oauth/callback/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
              - profile_image
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  jwt:
    secret: ${JWT_SECRET}
  data:
    redis:
      port: ${REDIS_PORT}
      host: ${REDIS_HOST}
      password: ${REDIS_PASSWORD}

# OAuth2 리디렉션 설정
app:
  oauth2:
    redirectUri: http://localhost:5173/oauth/callback
  cors:
    allowed-origins:
      - https://desqb38rc2v50.cloudfront.net  # CloudFront URL
      - http://localhost:5173                # 프론트엔드 개발 환경
      - http://localhost:3000                # 다른 프론트엔드 개발 환경

toss:
  secret-key: ${TOSS_SECRET_KEY}

server:
  shutdown: graceful

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    s3:
      bucket: ${AWS_BUCKET_NAME}
    region:
      static: ap-northeast-2  # 서울 리전


---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update  # create에서 update로 변경하여 기존 데이터 유지
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: true
    properties:
      hibernate:
        connection:
          characterEncoding: utf8mb4
          useUnicode: true
        format_sql: true
        dialect: org.hibernate.dialect.MariaDBDialect
---
---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:roome;MODE=MySQL
    username: sa
    password:
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: true
    properties:
      hibernate:
        format_sql: true